{"mappings":"YAAA,IAAOA,E,IAAKC,E,IAgBLC,E,IAAWC,GAhBNF,EAAAD,MAAM,KACT,QAAG,UADAC,EAEN,KAAG,OAFGA,EAGD,UAAG,YAHFA,EAIN,KAAG,QAYSE,EAAAD,MAAW,KACxB,IAAG,MADUC,EAEP,UAAG,YAFIA,EAGJ,aAAG,eAHCA,EAIX,MAAG,QCfVC,QAAQC,IAAI,UAeZ,MAAMC,EAAwC,IAAIC,IAqElD,SAASC,EAAmBC,GAC1BH,EAAYI,OAAOD,E,CA3CrBE,KAAKC,UAAaC,IAChBT,QAAQC,IAAI,aACZ,MAAMS,EAAOD,EAAEE,MAAM,GACrBD,EAAKE,UAAaH,IAChB,MAAMI,EAAUJ,EAAEK,KAClB,IAAKD,EAAS,MAAM,IAAIE,MAAM,cAE9B,OADAf,QAAQgB,MAAM,YAAaC,KAAKC,UAAUL,IAClCA,EAAQM,MACd,KAAKrB,EAAYsB,KAavB,SAA+BP,GAC7BX,EAAYmB,SAAQ,CAACX,EAAML,KACzB,GAAIA,GAAUQ,EAAQR,OACpB,IACEK,EAAKY,YAAYT,E,CACjB,MAAOJ,GACPT,QAAQuB,MAAMd,GACdL,EAAmBC,E,KAnBnBmB,CAAsBX,GACtB,MACF,KAAKf,EAAY2B,WAuBvB,SAAyBpB,EAAgBK,GACvCR,EAAYwB,IAAIrB,EAAQK,GACxBA,EAAKY,YAAY,CACfH,KAAMrB,EAAY2B,U,OAClBpB,G,CA1BIsB,CAAgBd,EAAQR,OAAQK,GAChC,MACF,KAAKZ,EAAY8B,aACfxB,EAAmBS,EAAQR,Q,CAGhC,C","sources":["src/humane-types.ts","src/humane-worker.ts"],"sourcesContent":["export enum Status {\n  UNKNOWN = 'unknown',\n  SENT = 'sent',\n  DELIVERED = 'delivered',\n  READ = 'read',\n}\n\nexport type HumaneMessage = {\n  msg: string;\n  msgId: string;\n  chatId: string;\n  userId: string;\n  datetime: string;\n  status?: Status;\n};\n\nexport const enum PayloadType {\n  MSG = 'msg',\n  CONNECTED = 'connected',\n  DISCONNECTED = 'disconnected',\n  ERROR = 'error',\n}\n\nexport type HumaneMessagePayload = {type: PayloadType.MSG} & HumaneMessage;\nexport type ConnectedPayload = {type: PayloadType.CONNECTED; userId: string};\nexport type DisconnectedPayload = {\n  type: PayloadType.DISCONNECTED;\n  userId: string;\n};\nexport type ErrorPayload = {\n  type: PayloadType.ERROR;\n  reason: string;\n  code: number;\n};\n\nexport type Payload =\n  | HumaneMessagePayload\n  | ConnectedPayload\n  | DisconnectedPayload\n  | ErrorPayload;\n","// https://joshuatz.com/posts/2021/strongly-typed-service-workers/\n/// <reference lib=\"webworker\" />\n\ndeclare const self: SharedWorkerGlobalScope;\n\nconsole.log('loaded');\n// Open a connection. This is a common\n// connection. This will be opened only once.\n// const ws = new WebSocket(\"ws://localhost:3001\");\n\nimport {HumaneMessagePayload, Payload, PayloadType} from './humane-types';\n\n// Create a broadcast channel to notify about state changes\n// const broadcastChannel = new BroadcastChannel('humane-chat');\n\n// Mapping to keep track of ports. You can think of ports as\n// mediums through we can communicate to and from tabs.\n// This is a map from a uuid assigned to each context(tab)\n// to its Port. This is needed because Port API does not have\n// any identifier we can use to identify messages coming from it.\nconst idToPortMap: Map<string, MessagePort> = new Map();\n\n// Let all connected contexts(tabs) know about state cahnges\n// ws.onopen = () =>\n//   broadcastChannel.postMessage({type: 'WSState', state: ws.readyState});\n// ws.onclose = () =>\n//   broadcastChannel.postMessage({type: 'WSState', state: ws.readyState});\n\n// When we receive data from the server.\n// ws.onmessage = ({data}) => {\n//   console.log(data);\n//   // Construct object to be passed to handlers\n//   const parsedData = {data: JSON.parse(data), type: 'message'};\n//   if (!parsedData.data.from) {\n//     // Broadcast to all contexts(tabs). This is because\n//     // no particular id was set on the from field here.\n//     // We're using this field to identify which tab sent\n//     // the message\n//     broadcastChannel.postMessage(parsedData);\n//   } else {\n//     // Get the port to post to using the uuid, ie send to\n//     // expected tab only.\n//     idToPortMap[parsedData.data.from].postMessage(parsedData);\n//   }\n// };\n\n// Event handler called when a tab tries to connect to this worker.\nself.onconnect = (e: MessageEvent) => {\n  console.log('onconnect');\n  const port = e.ports[0];\n  port.onmessage = (e: MessageEvent<Payload>) => {\n    const payload = e.data;\n    if (!payload) throw new Error('no payload');\n    console.debug('onmessage', JSON.stringify(payload));\n    switch (payload.type) {\n      case PayloadType.MSG:\n        handleIncomingMessage(payload);\n        break;\n      case PayloadType.CONNECTED:\n        handleConnected(payload.userId, port);\n        break;\n      case PayloadType.DISCONNECTED:\n        handleDisconnected(payload.userId);\n        break;\n    }\n  };\n};\n\nfunction handleIncomingMessage(payload: HumaneMessagePayload) {\n  idToPortMap.forEach((port, userId) => {\n    if (userId != payload.userId) {\n      try {\n        port.postMessage(payload);\n      } catch (e) {\n        console.error(e);\n        handleDisconnected(userId);\n      }\n    }\n  });\n}\n\nfunction handleConnected(userId: string, port: MessagePort) {\n  idToPortMap.set(userId, port);\n  port.postMessage({\n    type: PayloadType.CONNECTED,\n    userId,\n  });\n}\n\nfunction handleDisconnected(userId: string) {\n  idToPortMap.delete(userId);\n}\n"],"names":["$92f58793f6a8df13$export$96e9906d6d93a972","Status","$92f58793f6a8df13$export$3a0d79760672f45c","PayloadType","console","log","$74c1e82b8fa926fd$var$idToPortMap","Map","$74c1e82b8fa926fd$var$handleDisconnected","userId","delete","self","onconnect","e","port","ports","onmessage","payload","data","Error","debug","JSON","stringify","type","MSG","forEach","postMessage","error","$74c1e82b8fa926fd$var$handleIncomingMessage","CONNECTED","set","$74c1e82b8fa926fd$var$handleConnected","DISCONNECTED"],"version":3,"file":"humane-worker.40689ad2.js.map"}