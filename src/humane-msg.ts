/// <reference path="./parcel.d.ts"/>
/**
 * @license
 * Copyright 2022 Dmytro Zemnytskyi <pragmasoft@gmail.com>
 * LGPLv3
 *
 * @slot - humane-chat component contains message text (possibly formatted)
 */

import {LitElement, html, css, unsafeCSS} from 'lit';
import {customElement, property} from 'lit/decorators.js';

import humaneMsgStyles from 'bundle-text:./humane-msg.css';
import {randomStringId} from './random-string-id';

const componentStyles = css`
  ${unsafeCSS(humaneMsgStyles)}
`;

export enum Status {
  'unknown',
  'sent',
  'delivered',
  'read',
}

const relativeTimeFormat = new Intl.RelativeTimeFormat(
  navigator.languages as string[],
  {style: 'narrow', numeric: 'auto'}
);

const hhmmLocalizedFormat = new Intl.DateTimeFormat('en-US', {
  hour: '2-digit',
  minute: '2-digit',
});

/**
 * Styled chat message component. Presence of the <pre>status</pre> attribute means outgoing message.
 */
@customElement('humane-msg')
export class HumaneMsg extends LitElement {
  /**
   * Message id, optional, autogenerated with nanoid if not provided
   */
  @property({reflect: true})
  readonly msgId?: string = randomStringId();

  /**
   * Timestamp as an ISO formatted string; optional, defaults to current time
   */
  @property({type: Date, reflect: true})
  readonly datetime?: Date = new Date();

  /**
   * Status of the outgoing message; Optional, if present, must be one of 'sent' | 'delivered' | 'read';
   * in this case message is formatted as an outgoing message
   */
  @property({type: Status})
  status?: Status;

  override render() {
    return html` <slot></slot
      >${this._renderStatus()}${this._renderTimestamp()}`;
  }

  private _renderStatus() {
    return this.status ? html`<s class="${this.status}"></s>` : null;
  }

  private _renderTimestamp() {
    return this.datetime
      ? html`<time datetime=${this.datetime.toISOString()}
          >${hhmmLocalizedFormat.format(this.datetime)}</time
        >`
      : null;
  }
  static override styles = componentStyles;
}
