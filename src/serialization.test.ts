import {describe, expect, it} from '@jest/globals';
import {Encoder, Decoder} from '@msgpack/msgpack';
import {PlaintextMsg, MsgType, MsgStatus, HumaneMsg} from './humane-types';

const encoder = new Encoder();
const decoder = new Decoder();

const inflaterFactory = (fields: string[]) => (raw: unknown[]) =>
  raw.reduce<Record<string, unknown>>((obj, field, index) => {
    obj[fields[index]] = field;
    return obj;
  }, {});

const plaintextMsgFields = [
  'type',
  'msgId',
  'chatId',
  'userId',
  'timestamp',
  'status',
  'payload',
];

const inflatePlaintextMsg = inflaterFactory(plaintextMsgFields);

describe('MsgPack serialization', () => {
  it('decoded object should deep equal to the encded one', () => {
    const plaintext: PlaintextMsg = {
      type: MsgType.PLAINTEXT,
      payload: 'msg',
      msgId: 'msgId',
      chatId: 'chatId',
      userId: 'userId',
      timestamp: new Date(),
      status: MsgStatus.READ,
    };
    const buf = encoder.encode(plaintext);
    console.log(buf);
    const decoded = decoder.decode(buf);
    expect(decoded).toStrictEqual(plaintext);
  });

  it('should be able to decode hardcoded array generated by java serializer', () => {
    // PayloadMsg[msgId=msgId, chatId=chatId, userId=userId, timestamp=2022-09-24T19:18:03.481955Z, status=READ, payload=payload]
    const serializedPlaintext = [
      -105, 3, -91, 109, 115, 103, 73, 100, -90, 99, 104, 97, 116, 73, 100, -90,
      117, 115, 101, 114, 73, 100, -41, -1, 114, -24, 50, -32, 99, 47, 87, -21,
      3, -89, 112, 97, 121, 108, 111, 97, 100,
    ];
    const raw = decoder.decode(serializedPlaintext);
    console.log(raw);

    const decoded = inflatePlaintextMsg(raw as unknown[]) as HumaneMsg;
    console.log(decoded);
  });
});
