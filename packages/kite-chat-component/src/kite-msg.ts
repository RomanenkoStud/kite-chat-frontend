/**
 * @license
 * Copyright 2022 Dmytro Zemnytskyi <pragmasoft@gmail.com>
 * LGPLv3
 *
 */

import {LitElement, html, css, unsafeCSS} from 'lit';
import {customElement, property} from 'lit/decorators.js';

import kiteMsgStyles from './kite-msg.css?inline';
import {randomStringId} from './random-string-id';
import {MsgStatus} from './kite-payload';

console.debug('kite-msg loaded');

const componentStyles = css`
  ${unsafeCSS(kiteMsgStyles)}
`;

// const relativeTimeFormat = new Intl.RelativeTimeFormat(
//   navigator.languages as string[],
//   {style: 'narrow', numeric: 'auto'}
// );

const hhmmLocalizedFormat = new Intl.DateTimeFormat(
  navigator.languages as string[],
  {
    hour: '2-digit',
    minute: '2-digit',
  }
);

/**
 * Styled chat message component. Presence of the <pre>status</pre> attribute means outgoing message.
 *  @attr status
 *  @attr timestamp
 *
 *  @slot - kite-msg component contains message text (possibly formatted)
 */
@customElement(KiteMsgElement.TAG)
export class KiteMsgElement extends LitElement {
  static TAG = 'kite-msg';
  /**
   * Message id, optional, autogenerated with nanoid if not provided
   */
  @property({reflect: true})
  messageId = randomStringId();

  /**
   * Timestamp as an ISO formatted string; optional, defaults to current time
   */
  @property({
    converter(value) {
      const d = new Date();
      if (value) {
        const ms = Date.parse(value);
        if (!isNaN(ms)) {
          d.setTime(ms);
        } else {
          return value;
        }
      }
      return hhmmLocalizedFormat.format(d);
    },
  })
  timestamp = hhmmLocalizedFormat.format(new Date());

  /**
   * Status of the outgoing message; Optional, if present, must be one of 'sent' | 'delivered' | 'read';
   * in this case message is formatted as an outgoing message
   */
  @property({reflect: true})
  status?: keyof typeof MsgStatus;

  override render() {
    return html` <slot></slot
      >${this._renderStatus()}${this._renderTimestamp()}`;
  }

  private _renderStatus() {
    return this.status ? html`<s class="${this.status}"></s>` : null;
  }

  private _renderTimestamp() {
    return this.timestamp ? html`<time>${this.timestamp}</time>` : null;
  }
  static override styles = componentStyles;
}
